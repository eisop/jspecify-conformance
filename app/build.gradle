/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {


  id 'java-library'

  // Code formatting; defines targets "spotlessApply" and "spotlessCheck"
  // Requires JDK 11 or higher; the plugin crashes under JDK 8.
  id 'com.diffplug.spotless' version '6.25.0'

  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.6.37'
}

repositories {
  // Snapshot repository for JSpecify conformance test framework
  maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots'}
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots/'}
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

configurations {
  jSpecifyConformanceTests
}

dependencies {
  // Use JUnit Jupiter for testing.
  testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter:5.9.1'

  // This dependency is used by the application.
  implementation 'com.google.guava:guava:31.1-jre'

  testImplementation 'org.jspecify:jspecify:0.3.0'

  testImplementation 'org.jspecify.conformance:conformance-test-framework:0.0.0-SNAPSHOT'
  jSpecifyConformanceTests 'org.jspecify.conformance:conformance-tests:0.0.0-SNAPSHOT'
}

spotless {
  format 'misc', {
    // define the files to apply `misc` to
    target '*.md', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
  java {
    googleJavaFormat()
    formatAnnotations()
  }
  groovyGradle {
    target '**/*.gradle'
    greclipse()  // which formatter Spotless should use to format .gradle files.
    indentWithSpaces(2)
    trimTrailingWhitespace()
    // endWithNewline() // Don't want to end empty files with a newline
  }
}

apply plugin: 'org.checkerframework'

dependencies {
  compileOnly 'io.github.eisop:checker-qual:3.42.0-eisop2'
  testCompileOnly 'io.github.eisop:checker-qual:3.42.0-eisop2'
  checkerFramework 'io.github.eisop:checker:3.42.0-eisop2'
}

checkerFramework {
  checkers = [
    // No need to run CalledMethodsChecker, because ResourceLeakChecker does so.
    // 'org.checkerframework.checker.calledmethods.CalledMethodsChecker',
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.resourceleak.ResourceLeakChecker',
    'org.checkerframework.checker.signature.SignatureChecker',
    'org.checkerframework.checker.signedness.SignednessChecker',
    'org.checkerframework.common.initializedfields.InitializedFieldsChecker',
  ]
  extraJavacArgs = [
    '-Werror',
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnRedundantAnnotations',
    '-AwarnUnneededSuppressions',
    '-AnoJreVersionCheck',
    '-Aversion',
  ]
}
// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty('cfLocal')) {
  def cfHome = String.valueOf(System.getenv('CHECKERFRAMEWORK'))
  dependencies {
    compileOnly(files(cfHome + '/checker/dist/checker-qual.jar'))
    testCompileOnly(files(cfHome + '/checker/dist/checker-qual.jar'))
    checkerFramework files(cfHome + '/checker/dist/checker.jar')
  }
}

tasks.named('test') {
  // Use JUnit Platform for unit tests.
  useJUnitPlatform()
}

// Unzip JSpecify conformance tests using the artifact
task unzipJSpecifyConformanceTestSuite(type: Copy) {
  description 'Unzips the JSpecify conformance test suite into the build directory.'

  dependsOn(configurations.jSpecifyConformanceTests)
  copy {
    from zipTree(configurations.jSpecifyConformanceTests.singleFile)
    into "${buildDir}/jspecify-conformance-tests"
  }
}

// Run JSpecify conformance tests
task runJSpecifyConformanceTests(type: Test, group: 'Verification') {
  description 'Runs the JSpecify conformance tests.'
  include '**/NullnessJSpecifyConformanceTest.class'

  //shouldRunAfter test

  environment 'JSPECIFY_CONFORMANCE_TEST_MODE', 'WRITE'

  // Conformance tests
  inputs.files(unzipJSpecifyConformanceTestSuite)
  inputs.files("${projectDir}/src/test/resources/jspecify-conformance-test-report.txt")

  doFirst {
    systemProperties([
      "ConformanceTest.inputs": "${buildDir}/jspecify-conformance-tests/assertions/org/jspecify/conformance/tests",
      "ConformanceTest.report": "${projectDir}/src/test/resources/jspecify-conformance-test-report.txt",
      "ConformanceTest.deps"  : fileTree("${buildDir}/jspecify-conformance-tests/deps").join(":")
    ])
  }
}

//test.finalizedBy(runJSpecifyConformanceTests)
